# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import cv2
from PIL import Image, ImageOps
import numpy as np
from skimage.morphology import skeletonize, thin
import sys
from io import BytesIO
from matplotlib import pyplot as plt
import tempfile
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QFileDialog, QGraphicsScene, QSlider, QDialog, QVBoxLayout, QHBoxLayout, QSpinBox, QLabel, QLineEdit, QDialogButtonBox, QPushButton, QApplication, QGraphicsPixmapItem, QInputDialog
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas

from cropdialog import CropDialog
from menusegmentasi import MenuSegmentasi as ms

class Ui_MainWindow(object):

    def __init__(self):
        self.imagePath = None
        self.image_pixmap = None  # Variable to store the selected image pixmap
        self.imagefile = None
        self.imageResult = None

    def show_image(self):
        self.imagefile.show()

    # RGB to Grayscale
    def linear_luminance(self):
        image = self.imagefile

        image_np = np.array(image)

        def rgb_to_grayscale_luminance(image):
            return (0.2989 * image[:,:,0] + 0.5870 * image[:,:,1] + 0.1140 * image[:,:,2]).astype(np.uint8)

        grayscale_image = rgb_to_grayscale_luminance(image_np)

        output_image = Image.fromarray(grayscale_image)
        self.imageResult = output_image
        # Image.fromarray(grayscale_image).save('output_asset/grayscale_image_luminance.jpeg')

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # img_pixmap = QtGui.QPixmap.fromImage(img_pixmap)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def average(self):
        #Membuka citra menggunakan PIL
        image = self.imagefile

        #Mengonversi citra ke numpy array
        image_np = np.array(image)

        #Implementasi metode Average
        def rgb_to_grayscale_average(image):
            return np.mean(image, axis=2).astype(np.uint8)

        #Mengonversi citra ke grayscale menggunakan metode Average
        grayscale_image = rgb_to_grayscale_average(image_np)

        #Menyimpan citra grayscale
        # Image.fromarray(grayscale_image).save('grayscale_luminance.jpg')
        output_image = Image.fromarray(grayscale_image)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)

    # RGB to grayscale
    def lightness(self):
        # Membuka citra menggunakan PIL
        image = self.imagefile

        # Mengonversi citra ke numpy array
        image_np = np.array(image)

        # Implementasi metode Lightness
        def rgb_to_grayscale_lightness(image_np):
            max_rgb = np.max(image_np, axis=2)
            min_rgb = np.min(image_np, axis=2)
            lightness = ((max_rgb + min_rgb) / 2).astype(np.uint8)
            return lightness

        # Mengonversi citra ke grayscale menggunakan metode Lightness
        grayscale_image_np = rgb_to_grayscale_lightness(image_np)

        # Mengonversi numpy array ke citra grayscale dan menampilkan
        output_image = Image.fromarray(grayscale_image_np)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)
        # grayscale_image.show()

    def negative_inverse(self):

        image = self.imagefile

        image_np = np.array(image)

        image_np = 255 - image_np

        image_out = Image.fromarray(image_np.astype(np.uint8))

        self.imageResult = image_out

        # image_out.show()

        # image_out.save(output_image_path)

        # Convert the Pillow image to QImage
        # image_qt = ImageQt(image_out)
        # image_qt = QtGui.QImage(image_out, image_out.size[0], image_out.size[1], QtGui.QImage.Format_ARGB32)
        
        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            image_out.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # img_pixmap = QtGui.QPixmap.fromImage(img_pixmap)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)
    
    def log_brightness(self):
        # membaca gambar dari direktori
        image = cv2.imread(self.imagePath, cv2.IMREAD_GRAYSCALE)

        # KOnversi ke numpy array
        image = np.array(image, dtype=np.float32)

        # tentukan konstanta c berdasarkan rumus
        c = 255 / np.log(1 + np.max(image))

        # terapkan transformasi log brightness
        log_transformed = c * np.log(1 + image)

        # normalisasi gambar
        log_transformed = (log_transformed - np.min(log_transformed)) / (np.max(log_transformed) - np.min(log_transformed)) * 255
        log_transformed = np.array(log_transformed, dtype=np.uint8)

        output_image = Image.fromarray(log_transformed)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)

    def bit_depht(self, bit):

        image_path = self.imagePath
        num_colors = bit

        def kuantisasi_image(image_path, num_colors):
            image = Image.open(image_path)
            image = image.convert('RGB')

            img_array = np.array(image)

            min_val = img_array.min()
            max_val = img_array.max()

            step_size = (max_val - min_val) / num_colors

            kuantisasi_array = (img_array // step_size) * step_size

            kuantisasi_image = Image.fromarray(kuantisasi_array.astype('uint8'))

            return kuantisasi_image

        # Kuantisasi gambar
        result_image = kuantisasi_image(image_path, num_colors)
        # result_image.save('img_output/terkuantisasi_image.jpg')
        result_image.show()
        
    def quantize_grayscale(self):

        image = cv2.imread(self.imagePath, cv2.IMREAD_GRAYSCALE)

        # Jumlah level kuantisasi (dalam bit)
        levels = 8

        # Ukuran interval untuk setiap level
        interval_size = 256 // levels
        intervals = [i * interval_size for i in range(levels)]
        mid_values = [((i * interval_size) + ((i + 1) * interval_size - 1)) // 2 for i in range(levels)]

        # Fungsi kuantisasi pada satu channel gambar
        def quantize(image, intervals, mid_values):
            quantized_image = np.zeros_like(image)
            for i in range(len(intervals)):
                lower_bound = intervals[i]
                upper_bound = lower_bound + interval_size - 1
                mask = (image >= lower_bound) & (image <= upper_bound)
                quantized_image[mask] = mid_values[i]
            return quantized_image

        # Menerapkan kuantisasi pada gambar
        quantize_image = quantize(image, intervals, mid_values)

        output_image = Image.fromarray(quantize_image)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)

    def quantize_rgb(self):

        image = cv2.imread(self.imagePath, cv2.COLOR_BGR2RGB)

        # Jumlah level kuantisasi (dalam bit)
        levels = 8

        # Ukuran interval untuk setiap level
        interval_size = 256 // levels
        intervals = [i * interval_size for i in range(levels)]
        mid_values = [((i * interval_size) + ((i + 1) * interval_size - 1)) // 2 for i in range(levels)]

        # Fungsi kuantisasi pada satu channel gambar
        def quantize_channel(channel, intervals, mid_values):
            quantized_channel = np.zeros_like(channel)
            for i in range(len(intervals)):
                lower_bound = intervals[i]
                upper_bound = lower_bound + interval_size - 1
                mask = (channel >= lower_bound) & (channel <= upper_bound)
                quantized_channel[mask] = mid_values[i]
            return quantized_channel

        r, g, b = cv2.split(image)

        # Kuantisasi setiap channel
        quantize_r = quantize_channel(r, intervals, mid_values)
        quantize_g = quantize_channel(g, intervals, mid_values)
        quantize_b = quantize_channel(b, intervals, mid_values)

        # Menggabungkan hasil kuantisasi setiap channel
        quantize_image = cv2.merge([quantize_r, quantize_g, quantize_b])
        quantize_image = cv2.cvtColor(quantize_image, cv2.COLOR_BGR2RGB)

        output_image = Image.fromarray(quantize_image)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)

    def linear_brightness(self, brightness_factor):

        image = cv2.imread(self.imagePath, cv2.COLOR_BGR2RGB)

        # KOnversi ke numpy array
        image_np = np.array(image, dtype=np.int16)

        # Fungsi linear brightness
        def linear_brightness(image_np, brightness_factor):
            image_np = image_np + brightness_factor
            return np.clip(image_np, 0, 255).astype(np.uint8)

        # Konversi citra menjadi linear brightness dan value brightness
        linear_brightness_image = linear_brightness(image_np, brightness_factor)
        linear_brightness_image = cv2.cvtColor(linear_brightness_image, cv2.COLOR_BGR2RGB)

        output_image = Image.fromarray(linear_brightness_image)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)  

    def show_brightness_slider(self):
        dialog = QDialog(self.centralwidget)
        dialog.setWindowTitle("Adjust Brightness")

        layout = QVBoxLayout()

        slider = QSlider(QtCore.Qt.Horizontal)
        slider.setMinimum(-100)
        slider.setMaximum(100)
        slider.setValue(0)
        slider.setTickPosition(QSlider.TicksBelow)
        slider.setTickInterval(10)
        layout.addWidget(QLabel("Adjust Brightness"))
        layout.addWidget(slider)

        value_label = QLabel(f"Brightness: {slider.value()}")
        layout.addWidget(value_label)

        slider.valueChanged.connect(lambda: value_label.setText(f"Brightness : {slider.value()}"))

        ok_button = QPushButton("Ok")
        ok_button.clicked.connect(lambda: self.apply_brightness_change(slider.value(),dialog))
        layout.addWidget(ok_button)

        dialog.setLayout(layout)
        dialog.exec_()

    # Fungsi menerapkan perubahan brightness
    def apply_brightness_change(self, brigthness_value, dialog):
        self.linear_brightness(brigthness_value)
        dialog.accept()

    def contrast(self, contrast_factor):

        image = cv2.imread(self.imagePath, cv2.COLOR_BGR2RGB)

        # KOnversi ke numpy array
        image_np = np.array(image, dtype=np.float32)

        # Fungsi contrast
        def contrast(image_np, contrast_factor):
            image_np = image_np * contrast_factor
            return np.clip(image_np, 0, 255).astype(np.uint8)

        # Konversi citra menjadi contrast dan value contrast
        contrast_image = contrast(image_np, contrast_factor)
        contrast_image = cv2.cvtColor(contrast_image, cv2.COLOR_BGR2RGB)

        output_image = Image.fromarray(contrast_image)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)

    def show_contrast_slider(self):
        dialog = QDialog(self.centralwidget)
        dialog.setWindowTitle("Adjust Contrast")

        layout = QVBoxLayout()

        slider = QSlider(QtCore.Qt.Horizontal)
        slider.setMinimum(50)
        slider.setMaximum(300)
        slider.setValue(150)
        slider.setTickPosition(QSlider.TicksBelow)
        slider.setTickInterval(25)
        layout.addWidget(QLabel("Adjust Contrast"))
        layout.addWidget(slider)

        value_label = QLabel(f"Contrast: {slider.value()/100:.2f}")
        layout.addWidget(value_label)

        slider.valueChanged.connect(lambda: value_label.setText(f"Contrast : {slider.value()/100:.2f}"))

        ok_button = QPushButton("Ok")
        ok_button.clicked.connect(lambda: self.apply_contrast_change(slider.value()/100,dialog))
        layout.addWidget(ok_button)

        dialog.setLayout(layout)
        dialog.exec_()

    # Fungsi menerapkan perubahan brightness
    def apply_contrast_change(self, contrast_value, dialog):
        self.contrast(contrast_value)
        dialog.accept()  

    def linear_saturation(self, saturation_factor):

        image = cv2.imread(self.imagePath, cv2.COLOR_BGR2RGB)

        # KOnversi ke 5 channel
        image_hsv = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
        image_hsv = image_hsv.astype(np.float32)

        # Fungsi linear saturation
        def linear_saturation(image_hsv, saturation_factor):
            image_hsv[..., 1] = image_hsv[..., 1] * saturation_factor
            image_hsv[..., 1] = np.clip(image_hsv[..., 1], 0, 255)
            image_hsv = image_hsv.astype(np.uint8)
            return cv2.cvtColor(image_hsv, cv2.COLOR_HSV2RGB)

        # Konversi citra menjadi linear saturation dan valuae linear saturation
        linear_saturation_image = linear_saturation(image_hsv, saturation_factor)
        linear_saturation_image = cv2.cvtColor(linear_saturation_image, cv2.COLOR_BGR2RGB)

        output_image = Image.fromarray(linear_saturation_image)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)

    def show_saturation_slider(self):
        dialog = QDialog(self.centralwidget)
        dialog.setWindowTitle("Adjust saturation")

        layout = QVBoxLayout()

        slider = QSlider(QtCore.Qt.Horizontal)
        slider.setMinimum(0)
        slider.setMaximum(100)
        slider.setValue(50)
        slider.setTickPosition(QSlider.TicksBelow)
        slider.setTickInterval(10)
        layout.addWidget(QLabel("Adjust saturation"))
        layout.addWidget(slider)

        value_label = QLabel(f"Saturation: {slider.value()}")
        layout.addWidget(value_label)

        slider.valueChanged.connect(lambda: value_label.setText(f"Saturation : {slider.value()}"))

        ok_button = QPushButton("Ok")
        ok_button.clicked.connect(lambda: self.apply_brightness_change(slider.value(),dialog))
        layout.addWidget(ok_button)

        dialog.setLayout(layout)
        dialog.exec_()

    # Fungsi menerapkan perubahan brightness
    def apply_saturation_change(self, saturation_value, dialog):
        self.saturation(saturation_value)
        dialog.accept()

    def histogram_equalization(self):
        image = cv2.imread(self.imagePath, cv2.IMREAD_GRAYSCALE)

        equalized_image = cv2.equalizeHist(image)

        output_image = Image.fromarray(equalized_image)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)

    # Fuzzy Histogram Equalization Grayscal
    def fhe_grayscale(self):
        def fuzzy_histogram_equalization_grayscale(image):
            # Ambil histogram dari gambar
            hist, bins = np.histogram(image.flatten(), 256, [0, 256])

            # Terapkan fuzzy histogram equalization
            fuzzy_hist = fuzzy_membership(hist)

            # Hitung cumulative distribution function (CDF)
            cdf = fuzzy_hist.cumsum()
            cdf_normalized = cdf * hist.max() / cdf.max()  # Normalisasi

            # Gunakan CDF untuk histogram equalization
            cdf_m = np.ma.masked_equal(cdf, 0)
            cdf_m = (cdf_m - cdf_m.min()) * 255 / (cdf_m.max() - cdf_m.min())
            cdf_final = np.ma.filled(cdf_m, 0).astype('uint8')

            # Mapping nilai pixel berdasarkan CDF yang diubah
            img_equalized = cdf_final[image]

            return img_equalized

        def fuzzy_membership(hist):
            # Membuat fuzzy histogram dengan fungsi keanggotaan tertentu
            # Menggunakan fungsi sigmoid sebagai fungsi keanggotaan fuzzy
            fuzzy_hist = 1 / (1 + np.exp(-hist))

            # Normalisasi fuzzy histogram
            fuzzy_hist = fuzzy_hist / fuzzy_hist.sum()

            return fuzzy_hist

        # Load gambar grayscale
        image = cv2.imread(self.imagePath, cv2.IMREAD_GRAYSCALE)

        fhe_grayscale = fuzzy_histogram_equalization_grayscale(image)

        output_image = Image.fromarray(fhe_grayscale)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)

        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)
    
    # Fuzzy Histogram Equalization RGB
    def fhe_rgb(self):
        def fuzzy_histogram_equalization_rgb(image):
            # Konversi gambar dari BGR (OpenCV) ke RGB
            img_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # Pisahkan menjadi 3 channel: Red, Green, Blue
            r, g, b = cv2.split(img_rgb)
            
            # Lakukan fuzzy histogram equalization untuk setiap channel
            r_eq = fuzzy_histogram_equalization(r)
            g_eq = fuzzy_histogram_equalization(g)
            b_eq = fuzzy_histogram_equalization(b)
            
            # Gabungkan kembali channel-channel yang sudah diproses
            img_eq = cv2.merge((r_eq, g_eq, b_eq))
            
            # Konversi kembali ke format BGR (untuk OpenCV)
            img_eq_bgr = cv2.cvtColor(img_eq, cv2.COLOR_RGB2BGR)
            
            return img_eq_bgr

        def fuzzy_histogram_equalization(channel):
            # Ambil histogram
            hist, bins = np.histogram(channel.flatten(), 256, [0, 256])
            
            # Fungsi keanggotaan fuzzy
            fuzzy_hist = fuzzy_membership(hist)
            
            # Hitung cumulative distribution function (CDF)
            cdf = fuzzy_hist.cumsum()
            cdf_normalized = cdf * hist.max() / cdf.max()  # Normalisasi
            
            # Gunakan CDF untuk histogram equalization
            cdf_m = np.ma.masked_equal(cdf, 0)
            cdf_m = (cdf_m - cdf_m.min()) * 255 / (cdf_m.max() - cdf_m.min())
            cdf_final = np.ma.filled(cdf_m, 0).astype('uint8')
            
            # Mapping nilai pixel berdasarkan CDF yang diubah
            img_equalized = cdf_final[channel]
            
            return img_equalized

        def fuzzy_membership(hist):
            # Membuat fuzzy histogram dengan fungsi keanggotaan tertentu
            # Misalnya, menggunakan fungsi sigmoid atau gaussian sebagai dasar fuzzy
            fuzzy_hist = 1 / (1 + np.exp(-hist))  # Fungsi sigmoid
            
            # Normalisasi fuzzy histogram
            fuzzy_hist = fuzzy_hist / fuzzy_hist.sum()
            
            return fuzzy_hist

        # Load gambar
        image = cv2.imread(self.imagePath, cv2.IMREAD_COLOR)

        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # Terapkan fuzzy histogram equalization
        fhe_rgb = fuzzy_histogram_equalization_rgb(image_rgb)

        output_image = Image.fromarray(fhe_rgb)
        self.imageResult = output_image

        # Save image ke temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output_image.save(temp_file_path)
        
        # Load image dari temp file ke QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get ukuran QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # scale pixmap ke QGraphicView
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear() #clear gambar yang ada di QGraphicview_2
        self.sceneOutput.addPixmap(scaled_pixmap)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())

        os.remove(temp_file_path)

    def showHistogramInput(self):
        pixmap = self.graphicsView.scene().views()[0].grab()
        image = pixmap.toImage()
        self.showHistogram(image)

    def showHistogramOutput(self):
        pixmap = self.graphicsView_2.scene().views()[0].grab()
        image = pixmap.toImage()
        self.showHistogram(image)

    def showHistogramInputOutput(self):
        self.showHistogramInput()
        self.showHistogramOutput()

    def showHistogram(self, image):
        # Konversi QImage ke numpy array
        width = image.width()
        height = image.height()
        ptr = image.constBits()
        ptr.setsize(height * width * 4)
        arr = np.array(ptr).reshape(height, width, 4)

        # Tentukan jumlah channel gambar
        if arr.shape[2] == 4:
            # Gambar dengan alpha channel (RGBA)
            arr = arr[:, :, :3]  # Buang alpha channel
        num_channels = arr.shape[2] if len(arr.shape) == 3 else 1

        if num_channels == 1:
            # Gambar grayscale
            gray = arr[:, :, 0]

            # Hitung histogram untuk grayscale
            hist_gray, _ = np.histogram(gray.flatten(), bins=256, range=[0, 256])

            # Plot histogram grayscale
            plt.figure()
            plt.title('Histogram Grayscale')
            plt.xlabel('Pixel Value')
            plt.ylabel('Frequency')
            plt.xlim(0, 256)
            plt.plot(hist_gray, color='gray')
            plt.show()

        elif num_channels == 3:
            # Gambar RGB
            r, g, b = arr[:, :, 0], arr[:, :, 1], arr[:, :, 2]

            # Hitung histogram untuk masing-masing channel warna
            hist_r, _ = np.histogram(r.flatten(), bins=256, range=[0, 256])
            hist_g, _ = np.histogram(g.flatten(), bins=256, range=[0, 256])
            hist_b, _ = np.histogram(b.flatten(), bins=256, range=[0, 256])

            # Plot histogram RGB
            plt.figure()
            plt.title('Histogram RGB')
            plt.xlabel('Pixel Value')
            plt.ylabel('Frequency')
            plt.xlim(0, 256)
            plt.plot(hist_r, color='red', label='Red channel')
            plt.plot(hist_g, color='green', label='Green channel')
            plt.plot(hist_b, color='blue', label='Blue channel')
            plt.legend(loc='upper right')
            plt.show()
        else:
            print("Unsupported image format or channel number.")

    def showTransformTranslation(self):
        
        tx, ok = QInputDialog.getDouble(MainWindow, "Input Translation X", "Masukkan nilai translasi x:", 100)
        if ok:
            ty, ok = QInputDialog.getDouble(MainWindow, "Input Translation Y", "Masukkan nilai translasi y:", 50)
            if ok:
                self.transformTranslation(tx, ty)
    
    def showTransformZoom(self):
        zoom_factor, ok = QInputDialog.getDouble(MainWindow, "Input Nilai Zoom", "Masukkan nilai zoom anda:", 1.5)
        if ok:
            self.zoom_image(zoom_factor)
    
    def transformTranslation(self, x_shift, y_shift):
        image = self.imagefile
        
        width, height = image.size
        translation_matrix = (1, 0, x_shift, 0, 1, y_shift)
        translated_image = image.transform((width, height), Image.AFFINE, translation_matrix)

        # return translated_image
        # translated_image.show()

        self.imageResult = translated_image
        # Image.fromarray(grayscale_image).save('output_asset/grayscale_image_luminance.jpeg')

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            translated_image.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # img_pixmap = QtGui.QPixmap.fromImage(img_pixmap)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def showRotateImage(self):
        rotate_deg, ok = QInputDialog.getDouble(MainWindow, "Input Nilai Derajat", "Masukkan nilai derajat rotasi:", 45)
        if ok:
            self.rotateImage(rotate_deg)

    def rotateImage(self, angle):
        image = self.imagefile
        rotated_image = image.rotate(angle, expand=True)
        
        self.imageResult = rotated_image
        # Image.fromarray(grayscale_image).save('output_asset/grayscale_image_luminance.jpeg')

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            rotated_image.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def flipImage(self, mode = 'horizontal'):
        image = self.imagefile
        if mode == 'horizontal':
            flipped_image = ImageOps.mirror(image)
        elif mode == 'vertical':
            flipped_image = ImageOps.flip(image)
        
        self.imageResult = flipped_image

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            flipped_image.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)
        

    def zoom_image(self, zoom_factor):
        image = self.imagefile
        width, height = image.size
        zoomed_image = image.resize((int(width * zoom_factor), int(height * zoom_factor)))
        
        self.imageResult = zoomed_image
        # Image.fromarray(grayscale_image).save('output_asset/grayscale_image_luminance.jpeg')

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            zoomed_image.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # img_pixmap = QtGui.QPixmap.fromImage(img_pixmap)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def show_dialog_regiongrow(self):
        dialog = QDialog(self.centralwidget)  # Set parent widget (usually centralwidget in a QMainWindow)
        dialog.setWindowTitle("Input Region Grow Configuration")

        layout = QVBoxLayout()

        h_layout = QHBoxLayout()

        # Label dan input untuk nilai pertama
        h_layout.addWidget(QLabel("Masukkan nilai seed x"))
        seedvalx = QSpinBox()
        seedvalx.setRange(0, 255)
        h_layout.addWidget(seedvalx)

        # Label dan input untuk nilai kedua
        h_layout.addWidget(QLabel("Masukkan nilai seed y"))
        seedvaly = QSpinBox()
        seedvaly.setRange(0, 255)
        h_layout.addWidget(seedvaly)

        layout.addLayout(h_layout)

        # treshold value
        layout.addWidget(QLabel("Masukkan nilai Threshold"))
        spin_box_threshold = QSpinBox()
        spin_box_threshold.setRange(0, 255)  # Range contoh untuk threshold
        layout.addWidget(spin_box_threshold)

        # Tombol Ok
        ok_button = QPushButton("Ok")
        ok_button.clicked.connect(lambda: self.applyregiongrow(seedvalx.value(), seedvaly.value(), spin_box_threshold.value(), dialog))
        layout.addWidget(ok_button)

        # Set layout dan jalankan dialog
        dialog.setLayout(layout)
        dialog.exec_()

    def applyregiongrow(self, seed_x, seed_y, treshold, dialog):
        self.segment_region_grow((seed_x, seed_y), treshold)
        dialog.accept()
        
    # def testes(self):
    #     value1, value2 = lambda: self.get_two_text_values(self)
    #     if value1 and value2:  # Pastikan kedua nilai tidak kosong
    #         print(f"Nilai pertama: {value1}, Nilai kedua: {value2}")
    #         # Lakukan sesuatu dengan nilai tersebut

    def segment_region_grow(self, seed, threshold_value):
        image_path = self.imagePath
        output = ms.region_growing(image_path, seed, threshold_value)

        self.imageResult = output

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def show_segment_cluster(self):
        k, ok = QInputDialog.getInt(MainWindow, "Kmeans Cluster Configuration", "Masukkan nilai k:", 2)
        if ok:
            self.segment_kmeans_clustering(k)

    def segment_kmeans_clustering(self, k):
        pathimg = self.imagePath
        output = ms.kmeans_clustering(pathimg, k)

        self.imageResult = output

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def segment_watershed(self):
        pathimg = self.imagePath
        output = ms.watershed_segmentation(pathimg)

        self.imageResult = output

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def show_segment_globalthreshold(self):
        valtr, ok = QInputDialog.getInt(MainWindow, "Global Thresholding Configuration", "Masukkan Threshold Value:", 100)
        if ok:
            self.segment_Global_Thresholding(valtr)

    def segment_Global_Thresholding(self, valtrh):
        pathimg = self.imagePath
        output = ms.global_thresholding(pathimg, valtrh)

        self.imageResult = output

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def segment_adaptive_thresh_mean(self):
        pathimg = self.imagePath
        output = ms.adaptive_thresh_mean(pathimg)

        self.imageResult = output

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def segment_adaptive_thresh_gaussian(self):
        pathimg = self.imagePath
        output = ms.adaptive_thresh_mean(pathimg)

        self.imageResult = output

        # Save the image to a temporary file
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            output.save(temp_file_path)

        # Load the image from the temporary file into QPixmap
        img_pixmap = QtGui.QPixmap(temp_file_path)

        # Get the size of the QGraphicsView
        view_width = self.graphicsView_2.width()
        view_height = self.graphicsView_2.height()

        # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
        scaled_pixmap = img_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

        self.sceneOutput.clear()  # Clear any previous content in the scene
        self.sceneOutput.addPixmap(scaled_pixmap)
        # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.setSceneRect(self.sceneOutput.itemsBoundingRect())
        
        # delete temp file
        os.remove(temp_file_path)

    def erosion(self, sq):
        
        iamgepath = self.imagePath

        image = cv2.imread(iamgepath)  # Read in BGR format

        # Convert BGR to RGB
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        if image is None:
            print("Error: Could not load image. Check the image path.")
            return
        
        sq_kernel = ''

        # kernels define
        if sq == 3:
            sq_kernel = np.ones((3, 3), np.uint8)
        elif sq == 5:
            sq_kernel = np.ones((5, 5), np.uint8)
        elif sq == "crk3":
            sq_kernel = np.array([[0, 0, 1, 0, 0],
                                [0, 0, 1, 0, 0],
                                [1, 1, 1, 1, 1],
                                [0, 0, 1, 0, 0],
                                [0, 0, 1, 0, 0]], dtype=np.uint8)
            

        # erosion code
        erosion = cv2.erode(image, sq_kernel, iterations=1)

        output = Image.fromarray(erosion)

        output.show()

    def dilation(self, sq):
        iamgepath = self.imagePath
        
        image = cv2.imread(iamgepath)  # Read in BGR format

        sq_kernel = ''

        # Convert BGR to RGB
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        if image is None:
            print("Error: Could not load image. Check the image path.")
            return
        
        if sq == 3:
            sq_kernel = np.ones((3, 3), np.uint8)
        elif sq == 5:
            sq_kernel = np.ones((5, 5), np.uint8)
        elif sq == 'crk3':
             sq_kernel = np.array([[0, 0, 1, 0, 0],
                                [0, 0, 1, 0, 0],
                                [1, 1, 1, 1, 1],
                                [0, 0, 1, 0, 0],
                                [0, 0, 1, 0, 0]], dtype=np.uint8)

        # square_kernel_3 = np.ones((3, 3), np.uint8)

        # dilation code
        dilation = cv2.dilate(image, sq_kernel, iterations=1)
        
        output = Image.fromarray(dilation)

        output.show()
    
    def opening(self):
        print

    def closing(self):
        print

    def kernel_hit_or_miss(self):
        print

    def show_crop_dialog(self):
        if not self.imagefile:
            QtWidgets.QMessageBox.warning(self, "Warning", "No image loaded.")
            return
        
        # Show the crop dialog
        dialog = CropDialog(self.imagefile, MainWindow)
        if dialog.exec_() == QtWidgets.QDialog.Accepted:
            crop_rect = dialog.get_crop_rect()
            self.crop_image(crop_rect)

    def crop_image(self, rect):
        # Ensure an image is loaded
        if not self.imagefile:
            QtWidgets.QMessageBox.warning(self, "Warning", "No image loaded.")
            return
        
        # Crop the image with the provided coordinates
        left, top, right, bottom = map(int, [rect.left(), rect.top(), rect.right(), rect.bottom()])
        cropped_image = self.imagefile.crop((left, top, right, bottom))
        self.imageResult = cropped_image

        # Save the cropped image to a temporary file and load it into QPixmap
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            temp_file_path = temp_file.name
            cropped_image.save(temp_file_path)
        
        img_pixmap = QtGui.QPixmap(temp_file_path)
        self.sceneOutput.clear()
        self.sceneOutput.addPixmap(img_pixmap)
        self.graphicsView_2.setScene(self.sceneOutput)
        self.graphicsView_2.fitInView(self.sceneOutput.sceneRect(), QtCore.Qt.KeepAspectRatio)
        
        os.remove(temp_file_path)

    def saveAs(self):
        if hasattr(self, 'imageResult') and self.imageResult is not None:
            # Buka dialog untuk memilih lokasi dan memberi nama file
            options = QFileDialog.Options()
            fileName, _ = QFileDialog.getSaveFileName(None, "Save Image As", "", "PNG Files (*.png);;JPEG Files (*.jpg);;BMP Files (*.bmp)", options=options)
            
            if fileName:
                # Simpan gambar ke lokasi yang dipilih dengan nama file baru
                self.imageResult.save(fileName)
                print(f"Gambar disimpan di: {fileName}")
            else:
                print("Penyimpanan dibatalkan.")
        else:
            print("Tidak ada gambar untuk disimpan.")


    # application open file
    def openImage(self):
        # Show file dialog to select an image file
        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getOpenFileName(None, "Open Image", "", "Image Files (*.png *.jpg *.bmp *.jpeg)", options=options)
        
        if fileName:
            self.imagePath = fileName
            image_path = fileName
            img = Image.open(image_path)
            self.imagefile = img
            # img.show()

            # Load the image and display it in the QGraphicsView
            self.image_pixmap = QtGui.QPixmap(fileName)

            # Get the size of the QGraphicsView
            view_width = self.graphicsView.width()
            view_height = self.graphicsView.height()

            # Scale the pixmap to fit the QGraphicsView, preserving the aspect ratio
            scaled_pixmap = self.image_pixmap.scaled(view_width, view_height, QtCore.Qt.KeepAspectRatio)

            self.scene.clear()  # Clear any previous content in the scene
            self.scene.addPixmap(scaled_pixmap)
            # self.graphicsView.fitInView(self.scene.itemsBoundingRect(), QtCore.Qt.KeepAspectRatio)
            self.graphicsView.setSceneRect(self.scene.itemsBoundingRect())
            
    def clearObj(self):
        self.scene.clear()
        self.sceneOutput.clear()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1163, 500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(30, 30, 521, 401))
        self.graphicsView.setObjectName("graphicsView")
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(610, 30, 521, 401))
        self.graphicsView_2.setObjectName("graphicsView_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1163, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuINput = QtWidgets.QMenu(self.menubar)
        self.menuINput.setObjectName("menuINput")
        self.menuHIstogram = QtWidgets.QMenu(self.menuINput)
        self.menuHIstogram.setObjectName("menuHIstogram")
        self.menuColors = QtWidgets.QMenu(self.menubar)
        self.menuColors.setObjectName("menuColors")
        self.menuTransform = QtWidgets.QMenu(self.menubar)
        self.menuTransform.setObjectName("menuTransform")
        self.menuTranslate = QtWidgets.QMenu(self.menuTransform)
        self.menuTranslate.setObjectName("menuTranslate")
        self.menuRotate = QtWidgets.QMenu(self.menuTransform)
        self.menuRotate.setObjectName("menuRotate")
        self.menuFlipping = QtWidgets.QMenu(self.menuTransform)
        self.menuFlipping.setObjectName("menuFlipping")
        self.menuZoom = QtWidgets.QMenu(self.menuTransform)
        self.menuZoom.setObjectName("menuZoom")
        self.menuCrop = QtWidgets.QMenu(self.menuTransform)
        self.menuCrop.setObjectName("menuCrop")
        self.menuSegmentasi = QtWidgets.QMenu(self.menubar)
        self.menuSegmentasi.setObjectName("menuSegmentasi")
        self.menuRegion_Growing = QtWidgets.QMenu(self.menuSegmentasi)
        self.menuRegion_Growing.setObjectName("menuRegion_Growing")
        self.menuKmeans_Clustering = QtWidgets.QMenu(self.menuSegmentasi)
        self.menuKmeans_Clustering.setObjectName("menuKmeans_Clustering")
        self.menuWatershed_Segmentation = QtWidgets.QMenu(self.menuSegmentasi)
        self.menuWatershed_Segmentation.setObjectName("menuWatershed_Segmentation")
        self.menuGlobal_Thresholding = QtWidgets.QMenu(self.menuSegmentasi)
        self.menuGlobal_Thresholding.setObjectName("menuGlobal_Thresholding")
        self.menuAdaptive_Thresh_Mean = QtWidgets.QMenu(self.menuSegmentasi)
        self.menuAdaptive_Thresh_Mean.setObjectName("menuAdaptive_Thresh_Mean")
        self.menuAdaptive_Thresh_Gaussian = QtWidgets.QMenu(self.menuSegmentasi)
        self.menuAdaptive_Thresh_Gaussian.setObjectName("menuAdaptive_Thresh_Gaussian")
        self.menuRGB = QtWidgets.QMenu(self.menuColors)
        self.menuRGB.setObjectName("menuRGB")
        self.menuRGB_to_Grayscale = QtWidgets.QMenu(self.menuColors)
        self.menuRGB_to_Grayscale.setObjectName("menuRGB_to_Grayscale")
        self.menuQuantize = QtWidgets.QMenu(self.menuColors)
        self.menuQuantize.setObjectName("menuQuantize")
        self.menuBrightness = QtWidgets.QMenu(self.menuColors)
        self.menuBrightness.setObjectName("menuBrightness")
        self.menuBit_Depth = QtWidgets.QMenu(self.menuColors)
        self.menuBit_Depth.setObjectName("menuBit_Depth")
        self.menuTentang = QtWidgets.QMenu(self.menubar)
        self.menuTentang.setObjectName("menuTentang")
        self.menuHistogram_Equalization = QtWidgets.QMenu(self.menubar)
        self.menuHistogram_Equalization.setObjectName("menuHistogram_Equalization")
        self.menuAritmetical_Operation = QtWidgets.QMenu(self.menubar)
        self.menuAritmetical_Operation.setObjectName("menuAritmetical_Operation")
        self.menuFilter = QtWidgets.QMenu(self.menubar)
        self.menuFilter.setObjectName("menuFilter")
        self.menuEdge_Detection = QtWidgets.QMenu(self.menuFilter)
        self.menuEdge_Detection.setObjectName("menuEdge_Detection")
        self.menuGaussian_Blur = QtWidgets.QMenu(self.menuFilter)
        self.menuGaussian_Blur.setObjectName("menuGaussian_Blur")
        self.menuEdge_Detection_2 = QtWidgets.QMenu(self.menubar)
        self.menuEdge_Detection_2.setObjectName("menuEdge_Detection_2")
        self.menuMorfologi = QtWidgets.QMenu(self.menubar)
        self.menuMorfologi.setObjectName("menuMorfologi")
        self.menuErosion = QtWidgets.QMenu(self.menuMorfologi)
        self.menuErosion.setObjectName("menuErosion")
        self.menuDilation = QtWidgets.QMenu(self.menuMorfologi)
        self.menuDilation.setObjectName("menuDilation")
        self.menuOpening = QtWidgets.QMenu(self.menuMorfologi)
        self.menuOpening.setObjectName("menuOpening")
        self.menuClosing = QtWidgets.QMenu(self.menuMorfologi)
        self.menuClosing.setObjectName("menuClosing")

        self.menuClear = QtWidgets.QMenu(self.menubar)
        self.menuClear.setObjectName("menuClear")
        self.menuClear.aboutToShow.connect(self.clearObj)

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpenFile = QtWidgets.QAction(MainWindow)
        
        # application open
        self.actionOpenFile.setIconVisibleInMenu(True)
        self.actionOpenFile.setObjectName("actionOpenFile")
        self.actionOpenFile.triggered.connect(self.openImage)

        # Initialize a scene for the GraphicsView
        self.scene = QGraphicsScene()
        self.graphicsView.setScene(self.scene)

        # Initialize a scene for the output
        self.sceneOutput = QGraphicsScene()
        self.graphicsView_2.setScene(self.sceneOutput)

        self.actionSaveAs = QtWidgets.QAction(MainWindow)
        self.actionSaveAs.setObjectName("actionSaveAs")
        self.actionSaveAs.triggered.connect(self.saveAs)
        
        # application quit
        self.actionKeluar = QtWidgets.QAction(MainWindow)
        self.actionKeluar.setObjectName("actionKeluar")
        self.actionKeluar.triggered.connect(QtWidgets.QApplication.quit)
        
        self.actionInput = QtWidgets.QAction(MainWindow)
        self.actionInput.setObjectName("actionInput")
        self.actionInput.triggered.connect(self.showHistogramInput)

        self.actionOutput = QtWidgets.QAction(MainWindow)
        self.actionOutput.setObjectName("actionOutput")
        self.actionOutput.triggered.connect(self.showHistogramOutput)

        self.actionInput_Output = QtWidgets.QAction(MainWindow)
        self.actionInput_Output.setObjectName("actionInput_Output")
        self.actionInput_Output.triggered.connect(self.showHistogramInputOutput)
        
        # Invers negative
        self.actionInvers = QtWidgets.QAction(MainWindow)
        self.actionInvers.setObjectName("actionInvers")
        self.actionInvers.triggered.connect(self.negative_inverse)
        
        # Log Brightness
        self.actionLog_Brightness = QtWidgets.QAction(MainWindow)
        self.actionLog_Brightness.setObjectName("actionLog_Brightness")
        self.actionLog_Brightness.triggered.connect(self.log_brightness)
        
        self.actionGamma_Correction = QtWidgets.QAction(MainWindow)
        self.actionGamma_Correction.setObjectName("actionGamma_Correction")
        self.actionKuning = QtWidgets.QAction(MainWindow)
        self.actionKuning.setObjectName("actionKuning")
        self.actionOrange = QtWidgets.QAction(MainWindow)
        self.actionOrange.setObjectName("actionOrange")
        self.actionCyan = QtWidgets.QAction(MainWindow)
        self.actionCyan.setObjectName("actionCyan")
        self.actionPurple = QtWidgets.QAction(MainWindow)
        self.actionPurple.setObjectName("actionPurple")
        self.actionGrey = QtWidgets.QAction(MainWindow)
        self.actionGrey.setObjectName("actionGrey")
        self.actionCoklat = QtWidgets.QAction(MainWindow)
        self.actionCoklat.setObjectName("actionCoklat")
        self.actionMerah = QtWidgets.QAction(MainWindow)
        self.actionMerah.setObjectName("actionMerah")

        # RGB to Grayscale Average method
        self.actionAverage = QtWidgets.QAction(MainWindow)
        self.actionAverage.setObjectName("actionAverage")
        self.actionAverage.triggered.connect(self.average)

        # RGB to Grayscale Lightness method
        self.actionLightness = QtWidgets.QAction(MainWindow)
        self.actionLightness.setObjectName("actionLightness")
        self.actionLightness.triggered.connect(self.lightness)

        # RGB to Grayscale Luminance method
        self.actionLuminance = QtWidgets.QAction(MainWindow)
        self.actionLuminance.setObjectName("actionLuminance")
        self.actionLuminance.triggered.connect(self.linear_luminance)

        # Linear Brightness method
        self.actionLinear_Brightness = QtWidgets.QAction(MainWindow)
        self.actionLinear_Brightness.setObjectName("actionLinear_Brightness")
        self.actionLinear_Brightness.triggered.connect(self.linear_brightness)
        self.actionLinear_Brightness.triggered.connect(self.show_brightness_slider)

        # Contrast method
        self.actionContrast = QtWidgets.QAction(MainWindow)
        self.actionContrast.setObjectName("actionContrast")
        self.actionContrast.triggered.connect(self.contrast)
        self.actionContrast.triggered.connect(self.show_contrast_slider)
        
        # Saturation method
        self.actionSaturation = QtWidgets.QAction(MainWindow)
        self.actionSaturation.setObjectName("actionSaturation")
        self.actionSaturation.triggered.connect(self.linear_saturation)
        self.actionSaturation.triggered.connect(self.show_saturation_slider)
            
        # Quantize Grayscale method
        self.actionQuantize_Grayscale = QtWidgets.QAction(MainWindow)
        self.actionQuantize_Grayscale.setObjectName("actionQuantize_Grayscale")
        self.actionQuantize_Grayscale.triggered.connect(self.quantize_grayscale)

        # Quantize RGB method
        self.actionQuantize_RGB = QtWidgets.QAction(MainWindow)
        self.actionQuantize_RGB.setObjectName("actionQuantize_RGB")
        self.actionQuantize_RGB.triggered.connect(self.quantize_rgb)

        # action bit depth
        self.action1_bit = QtWidgets.QAction(MainWindow)
        self.action1_bit.setObjectName("action1_bit")
        self.action1_bit.triggered.connect(lambda: self.bit_depht(1))

        self.action2_bit = QtWidgets.QAction(MainWindow)
        self.action2_bit.setObjectName("action2_bit")
        self.action2_bit.triggered.connect(lambda: self.bit_depht(2))

        self.action3_bit = QtWidgets.QAction(MainWindow)
        self.action3_bit.setObjectName("action3_bit")
        self.action3_bit.triggered.connect(lambda: self.bit_depht(3))

        self.action4_bit = QtWidgets.QAction(MainWindow)
        self.action4_bit.setObjectName("action4_bit")
        self.action4_bit.triggered.connect(lambda: self.bit_depht(4))

        self.action5_bit = QtWidgets.QAction(MainWindow)
        self.action5_bit.setObjectName("action5_bit")
        self.action5_bit.triggered.connect(lambda: self.bit_depht(5))

        self.action6_bit = QtWidgets.QAction(MainWindow)
        self.action6_bit.setObjectName("action6_bit")
        self.action6_bit.triggered.connect(lambda: self.bit_depht(6))

        self.action7_bit = QtWidgets.QAction(MainWindow)
        self.action7_bit.setObjectName("action7_bit")
        self.action7_bit.triggered.connect(lambda: self.bit_depht(7))

        self.actionHistogram_Equalization = QtWidgets.QAction(MainWindow)
        self.actionHistogram_Equalization.setObjectName("actionHistogram_Equalization")
        self.actionHistogram_Equalization.triggered.connect(self.histogram_equalization)

        self.actionFuzzy_HE_RGB = QtWidgets.QAction(MainWindow)
        self.actionFuzzy_HE_RGB.setObjectName("actionFuzzy_HE_RGB")
        self.actionFuzzy_HE_RGB.triggered.connect(self.fhe_rgb)

        self.actionFuzzy_Grayscale = QtWidgets.QAction(MainWindow)
        self.actionFuzzy_Grayscale.setObjectName("actionFuzzy_Grayscale")
        # self.actionFuzzy_Grayscale.triggered.connect(self.fhe_grayscale)
        self.actionFuzzy_Grayscale.triggered.connect(self.fhe_grayscale)

        # action transform translation
        self.actionTranslation = QtWidgets.QAction(MainWindow)
        self.actionTranslation.setObjectName("actionTranslation")
        self.actionTranslation.triggered.connect(self.showTransformTranslation)

        # action transform rotate
        self.actionRotate = QtWidgets.QAction(MainWindow)
        self.actionRotate.setObjectName("actionRotate")
        self.actionRotate.triggered.connect(self.showRotateImage)

        # action transform flipping
        self.actionFlippingHorizontal = QtWidgets.QAction(MainWindow)
        self.actionFlippingHorizontal.setObjectName("actionFlippingHorizontal")
        self.actionFlippingHorizontal.triggered.connect(lambda: self.flipImage('horizontal'))
        
        self.actionFlippingVertical = QtWidgets.QAction(MainWindow)
        self.actionFlippingVertical.setObjectName("actionFlippingVertical")
        self.actionFlippingVertical.triggered.connect(lambda: self.flipImage('vertical'))

        # action transform zoom
        self.actionZoom = QtWidgets.QAction(MainWindow)
        self.actionZoom.setObjectName("actionZoom")
        self.actionZoom.triggered.connect(self.showTransformZoom)

        # action transform crop
        self.actionCrop = QtWidgets.QAction(MainWindow)
        self.actionCrop.setObjectName("actionCrop")
        self.actionCrop.triggered.connect(self.show_crop_dialog)

        # action region growing
        self.actionRegion_Growing = QtWidgets.QAction(MainWindow)
        self.actionRegion_Growing.setObjectName("actionRegion_Growing")
        self.actionRegion_Growing.triggered.connect(self.show_dialog_regiongrow)

        # action kmeans clustering
        self.actionKmeans_Clustering = QtWidgets.QAction(MainWindow)
        self.actionKmeans_Clustering.setObjectName("actionKmeans_Clustering")
        self.actionKmeans_Clustering.triggered.connect(self.show_segment_cluster)
        
        # action watershed segmentesi
        self.actionWatershed_Segmentation = QtWidgets.QAction(MainWindow)
        self.actionWatershed_Segmentation.setObjectName("actionWatershed_Segmentation")
        self.actionWatershed_Segmentation.triggered.connect(self.segment_watershed)

        # action global thresholding
        self.actionGlobal_Thresholding = QtWidgets.QAction(MainWindow)
        self.actionGlobal_Thresholding.setObjectName("actionGlobal_Thresholding")
        self.actionGlobal_Thresholding.triggered.connect(self.show_segment_globalthreshold)

        # action adaptive thresh mean
        self.actionAdaptive_Thresh_Mean = QtWidgets.QAction(MainWindow)
        self.actionAdaptive_Thresh_Mean.setObjectName("actionAdaptive_Thresh_Mean")
        self.actionAdaptive_Thresh_Mean.triggered.connect(self.segment_adaptive_thresh_mean)

        # aaction adaptive thresh gaussian
        self.actionAdaptive_Thresh_Gaussian = QtWidgets.QAction(MainWindow)
        self.actionAdaptive_Thresh_Gaussian.setObjectName("actionAdaptive_Thresh_Gaussian")
        self.actionAdaptive_Thresh_Gaussian.triggered.connect(self.segment_adaptive_thresh_gaussian)
        
        # identify Menu
        self.actionIdentity = QtWidgets.QAction(MainWindow)
        self.actionIdentity.setObjectName("actionIdentity")
        # self.actionIdentity.triggered.connect(lambda: self.segment_region_grow((10, 10), 20))
        # self.actionIdentity.triggered.connect(lambda: self.segment_kmeans_clustering(2))
        # self.actionIdentity.triggered.connect(self.segment_watershed)
        # self.actionIdentity.triggered.connect(self.)
        
        self.actionSharpen = QtWidgets.QAction(MainWindow)
        self.actionSharpen.setObjectName("actionSharpen")
        self.actionUnsharp_Masking = QtWidgets.QAction(MainWindow)
        self.actionUnsharp_Masking.setObjectName("actionUnsharp_Masking")
        self.actionAverage_Filter = QtWidgets.QAction(MainWindow)
        self.actionAverage_Filter.setObjectName("actionAverage_Filter")
        self.actionLow_Pass_Filter = QtWidgets.QAction(MainWindow)
        self.actionLow_Pass_Filter.setObjectName("actionLow_Pass_Filter")
        self.actionHight_Pass_Filter = QtWidgets.QAction(MainWindow)
        self.actionHight_Pass_Filter.setObjectName("actionHight_Pass_Filter")
        self.actionBandstop_Filter = QtWidgets.QAction(MainWindow)
        self.actionBandstop_Filter.setObjectName("actionBandstop_Filter")
        self.actionEdge_Detection_1 = QtWidgets.QAction(MainWindow)
        self.actionEdge_Detection_1.setObjectName("actionEdge_Detection_1")
        self.actionEdge_Detection_2 = QtWidgets.QAction(MainWindow)
        self.actionEdge_Detection_2.setObjectName("actionEdge_Detection_2")
        self.actionEdge_Detection_3 = QtWidgets.QAction(MainWindow)
        self.actionEdge_Detection_3.setObjectName("actionEdge_Detection_3")
        self.actionGaussian_Blur_3x3 = QtWidgets.QAction(MainWindow)
        self.actionGaussian_Blur_3x3.setObjectName("actionGaussian_Blur_3x3")
        self.actionGaussian_Blur_3x5 = QtWidgets.QAction(MainWindow)
        self.actionGaussian_Blur_3x5.setObjectName("actionGaussian_Blur_3x5")
        self.actionPrewitt = QtWidgets.QAction(MainWindow)
        self.actionPrewitt.setObjectName("actionPrewitt")
        self.actionSebel = QtWidgets.QAction(MainWindow)
        self.actionSebel.setObjectName("actionSebel")
        
        # erotion square 3
        self.actionSquare_4 = QtWidgets.QAction(MainWindow)
        self.actionSquare_4.setObjectName("actionSquare_4")
        self.actionSquare_4.triggered.connect(lambda: self.erosion(3))
        
        # erotion square 5
        self.actionSquare_6 = QtWidgets.QAction(MainWindow)
        self.actionSquare_6.setObjectName("actionSquare_6")
        self.actionSquare_6.triggered.connect(lambda: self.erosion(5))
        
        # erotion cross kernel
        self.actionCross_4 = QtWidgets.QAction(MainWindow)
        self.actionCross_4.setObjectName("actionCross_4")
        self.actionCross_4.triggered.connect(lambda: self.erosion('crk3'))
        
        # dilation square 3
        self.actionSquare_7 = QtWidgets.QAction(MainWindow)
        self.actionSquare_7.setObjectName("actionSquare_7")
        self.actionSquare_7.triggered.connect(self.dilation)        

        # dilation square 5
        self.actionSquare_8 = QtWidgets.QAction(MainWindow)
        self.actionSquare_8.setObjectName("actionSquare_8")
        self.actionSquare_8.triggered.connect(self.dilation)
        
        self.actionCross_5 = QtWidgets.QAction(MainWindow)
        self.actionCross_5.setObjectName("actionCross_5")
        
        self.actionSquare_9 = QtWidgets.QAction(MainWindow)
        self.actionSquare_9.setObjectName("actionSquare_9")
        
        self.actionSquare_10 = QtWidgets.QAction(MainWindow)
        self.actionSquare_10.setObjectName("actionSquare_10")
        self.actionTes2 = QtWidgets.QAction(MainWindow)
        self.actionTes2.setObjectName("actionTes2")
        self.menuFile.addAction(self.actionOpenFile)
        self.menuFile.addAction(self.actionSaveAs)
        self.menuFile.addAction(self.actionKeluar)
        self.menuHIstogram.addAction(self.actionInput)
        self.menuHIstogram.addAction(self.actionOutput)
        self.menuHIstogram.addAction(self.actionInput_Output)
        self.menuINput.addAction(self.menuHIstogram.menuAction())
        self.menuRGB.addAction(self.actionKuning)
        self.menuRGB.addAction(self.actionOrange)
        self.menuRGB.addAction(self.actionCyan)
        self.menuRGB.addAction(self.actionPurple)
        self.menuRGB.addAction(self.actionGrey)
        self.menuRGB.addAction(self.actionCoklat)
        self.menuRGB.addAction(self.actionMerah)
        self.menuRGB_to_Grayscale.addAction(self.actionAverage)
        self.menuRGB_to_Grayscale.addAction(self.actionLightness)
        self.menuRGB_to_Grayscale.addAction(self.actionLuminance)
        self.menuBrightness.addAction(self.actionLinear_Brightness)
        self.menuBrightness.addAction(self.actionContrast)
        self.menuBrightness.addAction(self.actionSaturation)
        self.menuQuantize.addAction(self.actionQuantize_Grayscale)
        self.menuQuantize.addAction(self.actionQuantize_RGB)
        self.menuBit_Depth.addAction(self.action1_bit)
        self.menuBit_Depth.addAction(self.action2_bit)
        self.menuBit_Depth.addAction(self.action3_bit)
        self.menuBit_Depth.addAction(self.action4_bit)
        self.menuBit_Depth.addAction(self.action5_bit)
        self.menuBit_Depth.addAction(self.action6_bit)
        self.menuBit_Depth.addAction(self.action7_bit)
        self.menuColors.addAction(self.menuRGB.menuAction())
        self.menuColors.addAction(self.menuRGB_to_Grayscale.menuAction())
        self.menuColors.addAction(self.menuQuantize.menuAction())
        self.menuColors.addAction(self.menuBrightness.menuAction())
        self.menuColors.addAction(self.actionInvers)
        self.menuColors.addAction(self.actionLog_Brightness)
        self.menuColors.addAction(self.menuBit_Depth.menuAction())
        self.menuColors.addAction(self.actionGamma_Correction)
        self.menuTransform.addAction(self.actionTranslation)
        self.menuTransform.addAction(self.actionRotate)
        self.menuTransform.addAction(self.menuFlipping.menuAction())
        self.menuFlipping.addAction(self.actionFlippingHorizontal)
        self.menuFlipping.addAction(self.actionFlippingVertical)
        self.menuTransform.addAction(self.actionZoom)
        self.menuTransform.addAction(self.actionCrop)
        self.menuSegmentasi.addAction(self.actionRegion_Growing)
        self.menuSegmentasi.addAction(self.actionKmeans_Clustering)
        self.menuSegmentasi.addAction(self.actionWatershed_Segmentation)
        self.menuSegmentasi.addAction(self.actionGlobal_Thresholding)
        self.menuSegmentasi.addAction(self.actionAdaptive_Thresh_Mean)
        self.menuSegmentasi.addAction(self.actionAdaptive_Thresh_Gaussian)
        self.menuHistogram_Equalization.addAction(self.actionHistogram_Equalization)
        self.menuHistogram_Equalization.addAction(self.actionFuzzy_HE_RGB)
        self.menuHistogram_Equalization.addAction(self.actionFuzzy_Grayscale)
        self.menuEdge_Detection.addAction(self.actionEdge_Detection_1)
        self.menuEdge_Detection.addAction(self.actionEdge_Detection_2)
        self.menuEdge_Detection.addAction(self.actionEdge_Detection_3)
        self.menuGaussian_Blur.addAction(self.actionGaussian_Blur_3x3)
        self.menuGaussian_Blur.addAction(self.actionGaussian_Blur_3x5)
        self.menuFilter.addAction(self.actionIdentity)
        self.menuFilter.addAction(self.menuEdge_Detection.menuAction())
        self.menuFilter.addAction(self.actionSharpen)
        self.menuFilter.addAction(self.menuGaussian_Blur.menuAction())
        self.menuFilter.addAction(self.actionUnsharp_Masking)
        self.menuFilter.addAction(self.actionAverage_Filter)
        self.menuFilter.addAction(self.actionLow_Pass_Filter)
        self.menuFilter.addAction(self.actionHight_Pass_Filter)
        self.menuFilter.addAction(self.actionBandstop_Filter)
        self.menuEdge_Detection_2.addAction(self.actionPrewitt)
        self.menuEdge_Detection_2.addAction(self.actionSebel)
        self.menuErosion.addAction(self.actionSquare_4)
        self.menuErosion.addAction(self.actionSquare_6)
        self.menuErosion.addAction(self.actionCross_4)
        self.menuDilation.addAction(self.actionSquare_7)
        self.menuDilation.addAction(self.actionSquare_8)
        self.menuDilation.addAction(self.actionCross_5)
        self.menuOpening.addAction(self.actionSquare_9)
        self.menuClosing.addAction(self.actionSquare_10)
        self.menuMorfologi.addAction(self.menuErosion.menuAction())
        self.menuMorfologi.addAction(self.menuDilation.menuAction())
        self.menuMorfologi.addAction(self.menuOpening.menuAction())
        self.menuMorfologi.addAction(self.menuClosing.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuINput.menuAction())
        self.menubar.addAction(self.menuColors.menuAction())
        self.menubar.addAction(self.menuTransform.menuAction())
        self.menubar.addAction(self.menuSegmentasi.menuAction())
        self.menubar.addAction(self.menuTentang.menuAction())
        self.menubar.addAction(self.menuHistogram_Equalization.menuAction())
        self.menubar.addAction(self.menuAritmetical_Operation.menuAction())
        self.menubar.addAction(self.menuFilter.menuAction())
        self.menubar.addAction(self.menuEdge_Detection_2.menuAction())
        self.menubar.addAction(self.menuMorfologi.menuAction())
        self.menubar.addAction(self.menuClear.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuINput.setTitle(_translate("MainWindow", "View"))
        self.menuHIstogram.setTitle(_translate("MainWindow", "HIstogram"))
        self.menuColors.setTitle(_translate("MainWindow", "Colors"))
        self.menuSegmentasi.setTitle(_translate("MainWindow", "Segmentasi"))
        self.menuTransform.setTitle(_translate("MainWindow", "Transform"))
        self.actionTranslation.setText(_translate("MainWindow", "Translation"))
        self.actionRotate.setText(_translate("MainWindow", "Rotate"))
        self.menuFlipping.setTitle(_translate("MainWindow", "Flip"))
        self.actionFlippingHorizontal.setText(_translate("MainWindow", "Horizontal"))
        self.actionFlippingVertical.setText(_translate("MainWindow", "Vertical"))
        self.actionCrop.setText(_translate("MainWindow", "Crop"))
        self.actionZoom.setText(_translate("MainWindow", "Zoom"))
        self.menuRGB.setTitle(_translate("MainWindow", "RGB"))
        self.menuRGB_to_Grayscale.setTitle(_translate("MainWindow", "RGB to Grayscale"))
        self.menuQuantize.setTitle(_translate("MainWindow", "Quantize"))
        self.menuBrightness.setTitle(_translate("MainWindow", "Brightness"))
        self.menuBit_Depth.setTitle(_translate("MainWindow", "Bit Depth"))
        self.menuTentang.setTitle(_translate("MainWindow", "Tentang"))
        self.menuHistogram_Equalization.setTitle(_translate("MainWindow", "Image Processing"))
        self.menuAritmetical_Operation.setTitle(_translate("MainWindow", "Aritmetical Operation"))
        self.menuFilter.setTitle(_translate("MainWindow", "Filter"))
        self.menuEdge_Detection.setTitle(_translate("MainWindow", "Edge Detection"))
        self.menuGaussian_Blur.setTitle(_translate("MainWindow", "Gaussian Blur"))
        self.menuEdge_Detection_2.setTitle(_translate("MainWindow", "Edge Detection"))
        self.menuMorfologi.setTitle(_translate("MainWindow", "Morfologi"))
        self.menuErosion.setTitle(_translate("MainWindow", "Erosion"))
        self.menuDilation.setTitle(_translate("MainWindow", "Dilation"))
        self.menuOpening.setTitle(_translate("MainWindow", "Opening"))
        self.menuClosing.setTitle(_translate("MainWindow", "Closing"))
        self.menuClear.setTitle(_translate("MainWindow", "clear"))
        self.actionOpenFile.setText(_translate("MainWindow", "Open"))
        self.actionSaveAs.setText(_translate("MainWindow", "Save As"))
        self.actionKeluar.setText(_translate("MainWindow", "Exit"))
        self.actionInput.setText(_translate("MainWindow", "Input"))
        self.actionOutput.setText(_translate("MainWindow", "Output"))
        self.actionInput_Output.setText(_translate("MainWindow", "Input Output"))
        self.actionInvers.setText(_translate("MainWindow", "Invers"))
        self.actionLog_Brightness.setText(_translate("MainWindow", "Log Brightness"))
        self.actionGamma_Correction.setText(_translate("MainWindow", "Gamma Correction"))
        self.actionKuning.setText(_translate("MainWindow", "Yellow"))
        self.actionOrange.setText(_translate("MainWindow", "Orange"))
        self.actionCyan.setText(_translate("MainWindow", "Cyan"))
        self.actionPurple.setText(_translate("MainWindow", "Purple"))
        self.actionGrey.setText(_translate("MainWindow", "Grey"))
        self.actionCoklat.setText(_translate("MainWindow", "Brown"))
        self.actionMerah.setText(_translate("MainWindow", "Red"))
        self.actionAverage.setText(_translate("MainWindow", "Average"))
        self.actionLightness.setText(_translate("MainWindow", "Lightness"))
        self.actionLuminance.setText(_translate("MainWindow", "Luminance"))
        self.actionLinear_Brightness.setText(_translate("MainWindow", "Linear Brightness"))
        self.actionContrast.setText(_translate("MainWindow", "Contrast"))
        self.actionSaturation.setText(_translate("MainWindow", "Saturation"))
        self.actionQuantize_Grayscale.setText(_translate("MainWindow", "Quantize Grayscale"))
        self.actionQuantize_RGB.setText(_translate("MainWindow", "Quantize RGB"))
        self.action1_bit.setText(_translate("MainWindow", "1 bit"))
        self.action2_bit.setText(_translate("MainWindow", "2 bit"))
        self.action3_bit.setText(_translate("MainWindow", "3 bit"))
        self.action4_bit.setText(_translate("MainWindow", "4 bit"))
        self.action5_bit.setText(_translate("MainWindow", "5 bit"))
        self.action6_bit.setText(_translate("MainWindow", "6 bit"))
        self.action7_bit.setText(_translate("MainWindow", "7 bit"))
        self.actionRegion_Growing.setText(_translate("Main Window", "Region Growing"))
        self.actionKmeans_Clustering.setText(_translate("Main Window", "Kmeans Clustering"))
        self.actionWatershed_Segmentation.setText(_translate("Main Window", "Watershed Segmentation"))
        self.actionGlobal_Thresholding.setText(_translate("Main Window", "Global Thresholding"))
        self.actionAdaptive_Thresh_Mean.setText(_translate("Main Window", "Adaptive Thresh Mean"))
        self.actionAdaptive_Thresh_Gaussian.setText(_translate("Main Window", "Adaptive Thresh Gaussian"))
        self.actionHistogram_Equalization.setText(_translate("MainWindow", "Histogram Equalization"))
        self.actionFuzzy_HE_RGB.setText(_translate("MainWindow", "Fuzzy HE RGB"))
        self.actionFuzzy_Grayscale.setText(_translate("MainWindow", "Fuzzy Grayscale"))
        self.actionIdentity.setText(_translate("MainWindow", "Identity"))
        self.actionSharpen.setText(_translate("MainWindow", "Sharpen"))
        self.actionUnsharp_Masking.setText(_translate("MainWindow", "Unsharp Masking"))
        self.actionAverage_Filter.setText(_translate("MainWindow", "Average Filter"))
        self.actionLow_Pass_Filter.setText(_translate("MainWindow", "Low Pass Filter"))
        self.actionHight_Pass_Filter.setText(_translate("MainWindow", "High Pass Filter"))
        self.actionBandstop_Filter.setText(_translate("MainWindow", "Bandstop Filter"))
        self.actionEdge_Detection_1.setText(_translate("MainWindow", "Edge Detection 1"))
        self.actionEdge_Detection_2.setText(_translate("MainWindow", "Edge Detection 2"))
        self.actionEdge_Detection_3.setText(_translate("MainWindow", "Edge Detection 3"))
        self.actionGaussian_Blur_3x3.setText(_translate("MainWindow", "Gaussian Blur 3x3"))
        self.actionGaussian_Blur_3x5.setText(_translate("MainWindow", "Gaussian Blur 3x5"))
        self.actionPrewitt.setText(_translate("MainWindow", "Prewitt"))
        self.actionSebel.setText(_translate("MainWindow", "Sobel"))
        self.actionSquare_4.setText(_translate("MainWindow", "Square 3"))
        self.actionSquare_6.setText(_translate("MainWindow", "Square 5"))
        self.actionCross_4.setText(_translate("MainWindow", "Cross 3"))
        self.actionSquare_7.setText(_translate("MainWindow", "Square 3"))
        self.actionSquare_8.setText(_translate("MainWindow", "Square 5"))
        self.actionCross_5.setText(_translate("MainWindow", "Cross 3"))
        self.actionSquare_9.setText(_translate("MainWindow", "Square 9"))
        self.actionSquare_10.setText(_translate("MainWindow", "Square 9"))
        self.actionTes2.setText(_translate("MainWindow", "tes2"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
